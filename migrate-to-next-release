#!/usr/bin/env bash

[ "${TRACE}" = "YES" ] && set -x && : "$0" "$@"

#
# When the gdb project makes releases, they are in a branch as well as
# tags. mulle-gdb development corresponds to each versions branch, but
# we use a 'tag' to do the merge. So we have mulle/11.1 corresponding
# to gdb-11.1-release and so forth.
# When it's time to release, we create a new branch and squash all the
# accumulated commits into this new branch. So effectively from the original
# gdb project, we are only one (big) commit away.
# Now we checkout the gdb project and cherrypick this big commit. All our
# changes are restricted to gdb_project/clang.
#

# Current branch we are developing from and the gdb tag where it
# branched of from
OLD_GDB_TAG="gdb-10.1-release"
OLD_MULLE_DEV_BRANCH="mulle/10.1.0"

# The gdb where we want to glom our changes unto
NEW_GDB_TAG="gdb-11.1-release"
# the name of the new branch we want to develop on from now
NEW_MULLE_DEV_BRANCH="mulle/11.1.0"

# usually don't edit these

GDB_PROJECT="gdb"
SOURCEDIRS="${GDB_PROJECT} include/gdb"

# check files used by this script
BEFOREFILE=.before-markers.txt
AFTERFILE=.after-markers.txt


####### >-> DONT EDIT >->
migrate()
{
   echo "### 1: Sanity Checks" >&2 &&

   if ! git rev-parse --verify "${OLD_GDB_TAG}" > /dev/null 2>&1
   then
      echo "Tag ${OLD_GDB_TAG} must exist" >&2 && exit 1
   fi

   if ! git rev-parse --verify "${NEW_GDB_TAG}" > /dev/null 2>&1
   then
      echo "Tag ${NEW_GDB_TAG} must exist" >&2 && exit 1
   fi

   if ! git rev-parse --verify "${OLD_MULLE_DEV_BRANCH}" > /dev/null 2>&1
   then
      echo "Branch ${OLD_MULLE_DEV_BRANCH} must exist" >&2 && exit 1
   fi

   if git rev-parse --verify "${NEW_MULLE_DEV_BRANCH}" > /dev/null 2>&1
   then
      echo "Branch ${NEW_MULLE_DEV_BRANCH} must not exist" >&2 && exit 1
   fi

   #
   # remove garbage tmp if present
   #
   if git rev-parse --verify "tmp_${NEW_MULLE_DEV_BRANCH}" > /dev/null 2>&1
   then
      git branch -D "tmp_${NEW_MULLE_DEV_BRANCH}" || exit 1
   fi

   #
   # remove garbage tag if present
   #
   if git rev-parse --verify "squashed_${OLD_MULLE_DEV_BRANCH}" > /dev/null 2>&1
   then
      git tag -d "squashed_${OLD_MULLE_DEV_BRANCH}" || exit 1
   fi

   echo "### 2: Determine Ancestor" >&2 &&

   ancestor="`git merge-base "${OLD_GDB_TAG}" "${OLD_MULLE_DEV_BRANCH}"`"
   [ -z "${ancestor}" ] && echo "No common ancestor found" >&2 && exit 1


   # create a new temporary branch to contain squashed patchset
   echo "### 3: Checkout into temporary branch" >&2 &&

   git checkout -b "tmp_${NEW_MULLE_DEV_BRANCH}" "${ancestor}" || exit 1

   #
   # squash everything into new branch
   # this helps weed out re-edits and commits that weren't useful
   # easing the conflict resolution
   #
   # ???? git merge --squash "tmp_${OLD_MULLE_DEV_BRANCH}"
   echo "### 4: Squash Merge" >&2

   git merge --squash "${OLD_MULLE_DEV_BRANCH}" || exit 1

   echo "### 5: Add changed script files" >&2

   cp "${TMPDIR:-/tmp}/migrate-to-next-release" "." || exit 1
   chmod +x "./migrate-to-next-release"
   git add "./migrate-to-next-release"

   #
   # There shouldn't be any problem until here. If there is a failure, before
   # this, you may run into a problem with scripts not being in /tmp
   #

   # commit stuff
   echo "### 6: Commit" >&2

   git commit -m "${OLD_MULLE_DEV_BRANCH} squashed + new version numbers" || exit 1

   #
   # remember until where did we squash the old branch (in case of
   # future edits)
   echo "### 7: Tag" >&2

   git tag "squashed_${OLD_MULLE_DEV_BRANCH}" "${OLD_MULLE_DEV_BRANCH}" || exit 1

   # count our change marker texts
   grep -R '@mulle-' ${SOURCEDIRS} > "${BEFOREFILE}" || exit 1

   #
   # Now get the new stuff
   #
   echo "### 8: Checkout" >&2

   git checkout -b "${NEW_MULLE_DEV_BRANCH}" "${NEW_GDB_TAG}" || exit 1


   echo "### 9: Cherry pick" >&2

   if ! git cherry-pick "tmp_${NEW_MULLE_DEV_BRANCH}"
   then
      git status -s
      exit 1
   fi
}


cleanup()
{
   # count our change marker texts again
   grep -R '@mulle-' ${SOURCEDIRS} > "${AFTERFILE}" || exit 1

   local before
   local after

   before="`cat "${BEFOREFILE}" `"
   after="`cat "${AFTERFILE}" `"

   if [ "${before}" != "${after}" ]
   then
      echo "Some @mulle- tags got lost in the merge" >&2
      echo "before : ${BEFOREFILE}" >&2
      echo "after  : ${AFTERFILE}" >&2
      diff "${BEFOREFILE}" "${AFTERFILE}" >&2
      exit 1
   fi

   #
   # resolve conflicts manually.
   # Check with grep '@mulle-objc' ... | wc -l, that all changes are present
   #
   echo "### 10: Tmp branch delete" >&2

   git branch -D "tmp_${NEW_MULLE_DEV_BRANCH}" || exit 1
   rm "${AFTERFILE}" "${BEFOREFILE}"
}


####### <-< DONT EDIT <-<

#
# Since an old version of this script gets will get checked out over the new
# One we copy script to /tmp and exec there
#
[ ! -e "gdb/objc-lang.c" ] && echo "cd to the root of gdb" >&2 && exit 1

case "$0" in
   "${TMPDIR:-/tmp}"*)
   ;;

   *)
      echo "### 0: Executing script \"$0\" from tmp" >&2

      cp "./migrate-to-next-release" "${TMPDIR:-/tmp}" || exit 1
      chmod 755 "${TMPDIR:-/tmp}/migrate-to-next-release" || exit 1
      exec "${TMPDIR:-/tmp}/migrate-to-next-release" "$@"
   ;;
esac

case "$1" in
   'continue'|'cleanup')
      cleanup
   ;;

   *)
      if [ ! -f "${AFTERFILE}" ]
      then
         migrate
      fi
      cleanup
   ;;
esac
